var search_data = {"index":{"searchIndex":["dnsbl","client","dnsblresult","resolv","dns","config","__phpot_decoder()","_decode_response()","_encode_query()","add_dnsbl()","dnsbls()","lookup()","nameservers()","nameservers=()","new()","normalize()","readme"],"longSearchIndex":["dnsbl","dnsbl::client","dnsbl::dnsblresult","resolv","resolv::dns","resolv::dns::config","dnsbl::client#__phpot_decoder()","dnsbl::client#_decode_response()","dnsbl::client#_encode_query()","dnsbl::client#add_dnsbl()","dnsbl::client#dnsbls()","dnsbl::client#lookup()","resolv::dns::config#nameservers()","dnsbl::client#nameservers=()","dnsbl::client::new()","dnsbl::client#normalize()",""],"info":[["DNSBL","","DNSBL.html","",""],["DNSBL::Client","","DNSBL/Client.html","","<p>Client actually handles the sending of queries to a recursive DNS server\nand places any replies into …\n"],["DNSBL::DNSBLResult","","DNSBL/DNSBLResult.html","","<p>DNSBLResult holds the result of a DNSBL lookup dnsbl: name of the DNSBL\nthat returned the answer item: …\n"],["Resolv","","Resolv.html","",""],["Resolv::DNS","","Resolv/DNS.html","",""],["Resolv::DNS::Config","","Resolv/DNS/Config.html","","<p>This is a monkeypatch for the built-in Ruby DNS resolver to specify\nnameservers\n"],["__phpot_decoder","DNSBL::Client","DNSBL/Client.html#method-i-__phpot_decoder","(ip)","<p>decodes the response from Project Honey Pot&#39;s service\n"],["_decode_response","DNSBL::Client","DNSBL/Client.html#method-i-_decode_response","(buf)","<p>takes a DNS response and converts it into a DNSBLResult\n"],["_encode_query","DNSBL::Client","DNSBL/Client.html#method-i-_encode_query","(item,itemtype,domain,apikey=nil)","<p>converts an ip or a hostname into the DNS query packet requires to lookup\nthe result\n"],["add_dnsbl","DNSBL::Client","DNSBL/Client.html#method-i-add_dnsbl","(name,domain,type='ip',codes={\"0\"=>\"OK\",\"127.0.0.2\"=>\"Blacklisted\"})","<p>allows the adding of a new DNSBL to the set of configured DNSBLs\n"],["dnsbls","DNSBL::Client","DNSBL/Client.html#method-i-dnsbls","()","<p>returns a list of DNSBL names currently configured\n"],["lookup","DNSBL::Client","DNSBL/Client.html#method-i-lookup","(item)","<p>lookup performs the sending of DNS queries for the given items returns an\narray of DNSBLResult\n"],["nameservers","Resolv::DNS::Config","Resolv/DNS/Config.html#method-i-nameservers","()","<p>Monkeypatch the nameservers to set a default if there are no defined\nnameservers\n"],["nameservers=","DNSBL::Client","DNSBL/Client.html#method-i-nameservers-3D","(ns=Resolv::DNS::Config.new.nameservers)","<p>sets the nameservers used for performing DNS lookups in round-robin fashion\n"],["new","DNSBL::Client","DNSBL/Client.html#method-c-new","(config = YAML.load(File.open(File.expand_path('../../../data', __FILE__)+\"/dnsbl.yaml\").read), two_level_tldfile = File.expand_path('../../../data', __FILE__)+\"/two-level-tlds\", three_level_tldfile = File.expand_path('../../../data', __FILE__)+\"/three-level-tlds\")","<p>initialize a new DNSBL::Client object the config file automatically points\nto a YAML file containing …\n"],["normalize","DNSBL::Client","DNSBL/Client.html#method-i-normalize","(domain)","<p>Converts a hostname to the domain: e.g., www.google.com =&gt; google.com,\nscience.somewhere.co.uk =&gt; …\n"],["README","","README_md.html","","<p>DNSBL::Client\n<p>dnsbl-client queries DNS Blacklists for listings. Currently this only does\nIP lookups, but …\n"]]}}